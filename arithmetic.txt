%{
#include "y.tab.h"
#include <stdio.h>
#include <stdlib.h>
void yyerror(const char *msg);
%}

%%
[0-9]+  { yylval = atoi(yytext); return NUMBER; }
[+\-*/%()]  { return yytext[0]; }
[ \t]   {}  // Ignore spaces and tabs
\n      { return '\n'; }  
.       { yyerror("Invalid character"); exit(1); }

%%
int yywrap() { return 1; }

yacc
%{
#include <stdio.h>
#include <stdlib.h>
void yyerror(const char *msg);
int yylex();
%}
%token NUMBER
%left '+' '-'
%left '*' '/' '%'
%right UMINUS  // Unary minus (e.g., -5)
%%
input : expr '\n' { 
    printf("Result: %d\n", $1); 
    return 0; 
}
;
expr : expr '+' expr { $$ = $1 + $3; }
     | expr '-' expr { $$ = $1 - $3; }
     | expr '*' expr { $$ = $1 * $3; }
     | expr '/' expr { 
         if ($3 == 0) { yyerror("Division by zero"); exit(1); } 
         $$ = $1 / $3; 
     }
     | expr '%' expr { 
         if ($3 == 0) { yyerror("Modulo by zero"); exit(1); } 
         $$ = $1 % $3; 
     }
     | '(' expr ')' { $$ = $2; }
     | '-' expr %prec UMINUS { $$ = -$2; }  // Handle unary minus
     | NUMBER { $$ = $1; }
;
%%
void yyerror(const char *msg) {
    printf("Error: %s\n", msg);
    exit(1);
}
int main() {
    printf("Enter an expression:\n");
    yyparse();
    return 0;
}
